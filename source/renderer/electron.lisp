;;;; SPDX-FileCopyrightText: Atlas Engineer LLC
;;;; SPDX-License-Identifier: BSD-3-Clause

(nyxt:define-package :nyxt/renderer/electron
    (:documentation "Electron renderer."))
(in-package :nyxt/renderer/electron)

(push :nyxt-electron *features*)

(define-class electron-renderer (renderer)
  ((name "electron"))
  (:export-class-name-p t)
  (:export-accessor-names-p t))

(setf nyxt::*renderer* (make-instance 'electron-renderer))

(define-class electron-browser ()
  ())

(defmethod install ((renderer electron-renderer))
  (flet ((set-superclasses (renderer-class-sym+superclasses)
           (closer-mop:ensure-finalized
            (closer-mop:ensure-class (first renderer-class-sym+superclasses)
                                     :direct-superclasses (rest renderer-class-sym+superclasses)
                                     :metaclass 'interface-class))))
    (mapc #'set-superclasses '((renderer-browser electron-browser)))))

(defmethod uninstall ((renderer electron-renderer))
  "Empty.")

(defmethod ffi-within-renderer-thread ((browser electron-browser) thunk))
(defmethod ffi-initialize ((browser electron-browser) urls startup-timestamp))
(defmethod ffi-buffer-evaluate-javascript ((buffer electron-buffer) javascript &optional world-name))
(defmethod ffi-buffer-evaluate-javascript-async ((buffer electron-buffer) javascript &optional world-name))
(defmethod ffi-buffer-sound-enabled-p ((buffer electron-buffer)))
(defmethod ffi-buffer-download ((buffer electron-buffer) url))
(defmethod ffi-display-url ((browser electron-browser) text))
(defmethod ffi-buffer-cookie-policy ((buffer electron-buffer)))
(defmethod ffi-preferred-languages ((buffer electron-buffer)))
(defmethod ffi-buffer-copy ((electron-buffer electron-buffer) &optional (text nil text-provided-p)))
(defmethod ffi-buffer-paste ((electron-buffer electron-buffer) &optional (text nil text-provided-p)))
(defmethod ffi-buffer-cut ((electron-buffer electron-buffer)))
(defmethod ffi-buffer-select-all ((electron-buffer electron-buffer)))
(defmethod ffi-buffer-undo ((electron-buffer electron-buffer)))
(defmethod ffi-buffer-redo ((electron-buffer electron-buffer)))
(defmethod ffi-kill-browser ((browser electron-browser)))
(defmethod on-signal-destroy ((window electron-window)))
(defmethod ffi-window-delete ((window electron-window)))
(defmethod ffi-window-fullscreen ((window electron-window)))
(defmethod ffi-window-unfullscreen ((window electron-window)))
(defmethod ffi-window-maximize ((window electron-window)))
(defmethod ffi-window-unmaximize ((window electron-window)))
(defmethod on-signal-key-press-event ((sender electron-window) event))
(defmethod on-signal-key-release-event ((sender electron-window) event))
(defmethod on-signal-button-press-event ((sender electron-buffer) event))
(defmethod on-signal-scroll-event ((sender electron-buffer) event))
(defmethod ffi-buffer-url ((buffer electron-buffer)))
(defmethod ffi-buffer-title ((buffer electron-buffer)))
(defmethod on-signal-load-failed-with-tls-errors ((buffer electron-buffer) certificate url))
(defmethod on-signal-decide-policy ((buffer electron-buffer) response-policy-decision policy-decision-type-response))
(defmethod on-signal-mouse-target-changed ((buffer electron-buffer) hit-test-result modifiers))
(defmethod ffi-window-make ((browser electron-browser)))
(defmethod ffi-window-to-foreground ((window electron-window)))
(defmethod ffi-window-title ((window electron-window)))
(defmethod (setf ffi-window-title) (title (window electron-window)))
(defmethod ffi-window-active ((browser electron-browser)))
(defmethod ffi-window-set-buffer ((window electron-window) (buffer electron-buffer) &key (focus t)))
(defmethod ffi-window-add-panel-buffer ((window electron-window) (buffer panel-buffer) side))
(defmethod ffi-width ((buffer panel-buffer)))
(defmethod (setf ffi-width) (width (buffer panel-buffer)))
(defmethod ffi-window-delete-panel-buffer ((window electron-window) (buffer panel-buffer)))
(defmethod ffi-height ((buffer prompt-buffer)))
(defmethod (setf ffi-height) ((height integer) (buffer prompt-buffer)))
(defmethod ffi-focus-prompt-buffer ((window electron-window))
(defmethod ffi-height ((buffer status-buffer)))
(defmethod (setf ffi-height) (height (buffer status-buffer)))
(defmethod ffi-window-message-buffer-height ((window electron-window)))
(defmethod (setf ffi-window-message-buffer-height) (height (window electron-window)))
(defmethod ffi-height ((buffer electron-buffer)))
(defmethod ffi-width ((buffer electron-buffer)))
(defmethod ffi-height ((buffer electron-window)))
(defmethod ffi-width ((buffer electron-window)))
(defmethod ffi-buffer-make ((buffer electron-buffer)))
(defmethod ffi-buffer-delete ((buffer electron-buffer)))
(defmethod ffi-buffer-load ((buffer electron-buffer) url))
(defmethod ffi-buffer-load-html ((buffer electron-buffer) html-content url))
(defmethod ffi-buffer-load-alternate-html ((buffer electron-buffer) html-content content-url url))
(defmethod ffi-buffer-add-user-style ((buffer electron-buffer) (style electron-user-style)))
(defmethod ffi-buffer-remove-user-style ((buffer electron-buffer) (style electron-user-style)))
(defmethod ffi-buffer-add-user-script ((buffer electron-buffer) (script electron-user-script)))
(defmethod ffi-buffer-remove-user-script ((buffer electron-buffer) (script electron-user-script)))
(defmethod ffi-buffer-user-agent ((buffer electron-buffer)))
(defmethod (setf ffi-buffer-user-agent) (value (buffer electron-buffer)))
(defmethod ffi-buffer-proxy ((buffer electron-buffer)))
(defmethod (setf ffi-buffer-proxy) (proxy-specifier)
(defmethod ffi-buffer-zoom-level ((buffer electron-buffer)))
(defmethod (setf ffi-buffer-zoom-level) (value (buffer electron-buffer)))
(defmethod ffi-generate-input-event ((window electron-window) event))
(defmethod ffi-generated-input-event-p ((window electron-window) event))
(defmethod ffi-inspector-show ((buffer electron-buffer)))
(defmethod ffi-print-status ((window electron-window) text))
(defmethod ffi-print-message ((window electron-window) text))
(defmethod webkit-history ((buffer electron-buffer)))
(defmethod ffi-focused-p ((buffer electron-buffer)))
(defmethod ffi-muted-p ((buffer electron-buffer)))
(defmethod ffi-tracking-prevention ((buffer electron-buffer)))
(defmethod (setf ffi-tracking-prevention) (value (buffer electron-buffer)))
(defmethod ffi-web-extension-send-message ((buffer electron-buffer)))
